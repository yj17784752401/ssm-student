<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
">
<!--    @service等注解配置的bean 扫描根目录下包-->
    <context:component-scan base-package="com.roadjava.student">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    加载自定义配置到spring-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
<!--    配置数据源-->
    <bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="username" value="${db.userName}"/>
        <property name="password" value="${db.pwd}"/>
<!--        连接池配置-->
        <property name="connectionTimeout" value="${db.connectionTimeout}"/>
        <property name="minimumIdle" value="${db.minimumIdle}"/>
        <property name="maximumPoolSize" value="${db.maximumPoolSize}"/>
        <property name="maxLifetime" value="${db.maxLifetime}"/>
    </bean>
<!--    配置mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="hikariDataSource"/>
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.roadjava.student.mapper"/>
<!--        假如有多个数据源的时候可以通过该属性指定，现在就一个可以不配置-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
<!--    配置事务-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="hikariDataSource"/>
    </bean>
<!--    配置通知,配置你要做什么事情，拦截后要执行的规则-->
    <tx:advice transaction-manager="txManager" id="txAdvice">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
<!--        配置切入点：txAdvice将来对谁起作用-->
        <aop:pointcut id="txPc"
                      expression="execution(* com.roadjava.student.service..*Service.*(..))"/>
<!--        配置增强器advisor:advice+pc-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
    </aop:config>
<!--    配置spring生成代理的方式，默认就是jdk-->
<!--    <aop:aspectj-autoproxy proxy-target-class="true"/>-->
</beans>